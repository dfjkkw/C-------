//用栈模拟汉诺塔游戏过程
//1、有三根相邻的柱子，标号为A, B, C。
//2、A柱子上从下到上按金字塔状叠放着n个不同大小的圆盘。
//3、现在把所有盘子一个一个移动到柱子B上，并且每次移动同一根柱子上都不能出现大盘子在小盘子上方。
#include<iostream>
#include<stack>
using namespace std;
struct Hanoi
{
	short plates;//当前盘子个数
	char from;//移出的柱子
	char via;//中转柱
	char to;//要移往的柱子
	Hanoi() {};
	Hanoi(short p, char f, char v, char t) :plates(p), from(f), via(v), to(t) {};
};
int main()
{
	Hanoi hanoi;
	stack<Hanoi>st;
	st.push(Hanoi(3, 'A', 'B', 'C'));
	while (!st.empty())
	{
		hanoi = st.top();
		st.pop();
		if (hanoi.plates == 1)
			cout << "从" << hanoi.from << "柱子移动一个盘子到" << hanoi.to << "柱子。" << endl;
		else {
			st.push(Hanoi(hanoi.plates - 1, hanoi.via, hanoi.from, hanoi.to));
			st.push(Hanoi(1, hanoi.from, hanoi.via, hanoi.to));
			st.push(Hanoi(hanoi.plates - 1, hanoi.from, hanoi.to, hanoi.via));
		}
	}
	return 0;
}