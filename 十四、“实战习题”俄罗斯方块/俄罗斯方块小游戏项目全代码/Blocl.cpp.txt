#include "Block.h"
#include<stdlib.h>

IMAGE*Block::imgs[7] = { NULL,0 };
int Block::size = 36;

Block::Block()
{
	//绘制方块的图像纹理
	if (imgs[0] == NULL)
	{
		IMAGE imgTmp;
		loadimage(&imgTmp, "res/tiles.png");
		SetWorkingImage(&imgTmp);
		for (int i = 0;i < 7;i++)
		{
			imgs[i] = new IMAGE;
			getimage(imgs[i], i * size, 0, size, size);
		}
		SetWorkingImage();//恢复工作区
	}
	//创建方块形状（看成在2*4（行*列）的八个正方体中截取4个正方体组成的图形）
	int blocks[7][4] = {
		1,3,5,7,//I型
		2,4,5,7,//Z 1型
		3,5,4,6,//Z 2型
		3,5,4,7,//T型
		2,3,5,7,//L型
		3,5,7,6,//J型
		2,3,4,5,//田型
	};

	//随机生成一个俄罗斯方块
	blockType=rand() % 7+1;//1+(0~6)=>（1~7）
	//初始化smallBlocks数组
	for (int i = 0;i < 4;i++)
	{
		int value = blocks[blockType - 1][i];
		smallBlocks[i].row = value / 2;
		smallBlocks[i].col = value % 2;
	}
	img = imgs[blockType - 1];
}

//实现俄罗斯方块的降落
void Block::drop()
{
	//for (auto& block : smallBlocks)
	//{
	//	block.row++;
	//}
	for (int i = 0;i < 4;i++)
	{
		smallBlocks[i].row++;
	}
}

void Block::moveLeftRight(int offset)
{
	for (int i = 0;i < 4;i++)
	{
		smallBlocks[i].col += offset;
	}
}

void Block::rotate()
{
	Point p = smallBlocks[1];//以第一个方块为中心

	for (int i = 0;i < 4;i++)
	{
		Point tmp = smallBlocks[i];
		smallBlocks[i].col = p.col - tmp.row + p.row;
		smallBlocks[i].row = p.row + tmp.col - p.col;
	}
}

void Block::draw(int leftMargin, int topMargin)
{
	//绘制俄罗斯方块
	for (int i = 0;i < 4;i++)
	{
		int x = leftMargin + smallBlocks[i].col * size;
		int y = topMargin + smallBlocks[i].row * size;
		putimage(x, y, img);
	}
}

IMAGE** Block::getImage()
{
	return imgs;
}

Block& Block::operator=(const Block& other)
{
	if (this == &other)return *this;
	this->blockType = other.blockType;
	for (int i = 0;i < 4;i++)
	{
		this->smallBlocks[i] = other.smallBlocks[i];
	}
	return *this;
}

bool Block::blockInMap(const vector<vector<int>>& map)
{
	int rows = map.size();
	int cols = map[0].size();
	for (int i = 0;i < 4;i++)
	{
		if (smallBlocks[i].col < 0 || smallBlocks[i].col >= cols ||
			smallBlocks[i].row < 0 || smallBlocks[i].row >= rows||
			map[smallBlocks[i].row][smallBlocks[i].col]!=0)
		{
			return false;
		}
	}
	return true;
}

void Block::soildfy(vector<vector<int>>& map)
{
	for (int i = 0;i < 4;i++)
	{
		//设置标记，“固化”对应的位置
		map[smallBlocks[i].row][smallBlocks[i].col] = blockType;
	}
}

int Block::getBlockType()
{
	return blockType;
}
