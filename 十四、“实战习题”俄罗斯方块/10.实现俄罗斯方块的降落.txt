//实现俄罗斯方块的降落
void Block::drop()
{
	//for (auto& block : smallBlocks)
	//{
	//	block.row++;
	//}
	for (int i = 0;i < 4;i++)
	{
		smallBlocks[i].row++;
	}
}
Block& Block::operator=(const Block& other)
{
	if (this == &other)return *this;
	this->blockType = other.blockType;
	for (int i = 0;i < 4;i++)
	{
		this->smallBlocks[i] = other.smallBlocks[i];
	}
	return *this;
}

bool Block::blockInMap(const vector<vector<int>>& map)
{
	int rows = map.size();
	int cols = map[0].size();
	for (int i = 0;i < 4;i++)
	{
		if (smallBlocks[i].col < 0 || smallBlocks[i].col >= cols ||
			smallBlocks[i].row < 0 || smallBlocks[i].row >= rows||
			map[smallBlocks[i].row][smallBlocks[i].col]!=0)
		{
			return false;
		}
	}
	return true;
}
void Block::soildfy(vector<vector<int>>& map)
{
	for (int i = 0;i < 4;i++)
	{
		//设置标记，“固化”对应的位置
		map[smallBlocks[i].row][smallBlocks[i].col] = blockType;
	}
}

void Tetris::drop()
{
	bakBlock = *curBlock;
	curBlock->drop();

	if (!curBlock->blockInMap(map))
	{
		//把这个方块“固化”
		bakBlock.soildfy(map);
		delete curBlock;
		curBlock = nextBlock;
		nextBlock = new Block;
	}
}