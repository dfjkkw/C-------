//利用递归回溯的方法来解决八皇后问题的程序步骤较少且可读性强，代码量少，不用尝试所有
//错误的摆放方法，遇到错误就回溯，效率较高。但递归算法占用空间更大，且每调用一次函数
//都要在内存栈中分配一定的空间，而栈的空间是有限的，若递归调用的层次太多就容易造成栈
//的溢出。
#include<stdio.h>
int place[8]={0};//皇后位置
bool flag[8]={1,1,1,1,1,1,1,1};//定义列
bool d1[15]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};/*定义上对角线（共有15个对角线,
因此定义一个长度为15的bool型数组，初值为1代表该对角线没有被皇后占领，
若被皇后占领则赋值为0*/
bool d2[15]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1} ;//定义下对角线
int number=0;//记录输出次数
void print()//定义输出函数
{
	int col,i,j;
number++;//每调用一次输出函数number自加一次，记录摆放方法个数
	printf("No.%2d\n",number);
	int table[8][8]={0};//设置一个8*8的棋盘
	for (i=0;i<8;i++)
	{
		table[i][place[i]]=1;//将每一行皇后所在位置赋值为1
	}
	for (i=0;i<8;i++)
	{
		for (j=0;j<8;j++)
		{
	printf("%d|",table[i][j]);
		}printf("\n");
	}
}
int queen(int n )//定义递归回溯函数
{
	int col;
	for (col=0;col<8;col++)
	{
		if (flag[col]&&d1[n-col+7]&&d2[n+col])//判断皇后是否冲突
		{
			place[n]=col;//放置皇后
			flag[col]=false;
			d1[n-col+7]=false;
	
	d2[n+col]=false;//将该皇后所在的行、列、对角线设置为被占领
			if(n<7)	{queen(n+1);}//当行数小于7时；递归调用下一行
		else{print();}//调用输出函数
			flag[col]=true;//回溯
			d1[n-col+7]=true;
			d2[n+col]=true;
		}
	}
	return number;
}
int main()
{
number=queen(0);//从第0行开始执行
printf("共有%d种摆放方法",number);//输出方法的个数
	return 0;}
