//枚举法（2）的冲突算法及思路与枚举法（1）类似，该方法虽然简化了
//部分代码，但是时间复杂度更大。
#include <stdio.h>
#include <math.h>
int count = 0;//记录方法次数
 
//输出函数
void showAnswer(int *queen){
	int i,j;
count++;
printf("第%d种解法:\n",count);
for(i = 0; i < 8; ++i)
{
	for(j = 0; j < 8; ++j)
	{
		if(queen[i] == j)
			printf("1|");
		else
			printf("0|");
	}
	printf("\n");
}
		printf("\n");}
//判断是否皇后位置是否冲突算法
void chongtu(int *queen){
	int i,j,flag=1;
	for(i = 0; i < 8; ++i)
	{
		for(j = 0; j < 8; ++j)
		{
			if(i != j)
			{
		if(queen[i] == queen[j])
					{flag = 0;}
	else if(abs(queen[i] - queen[j]) == abs(i-j))
			flag = 0;
			}
		}
	}
	if(flag == 1)
	{
showAnswer(queen);//若该方法可行则调用输出函数
}
 }
//枚举出所有摆放方法（相较于枚举法（1）简化了八重循环）
void set_queen(int *queen)
{
    int i,flag;
    while(queen[8] != 1)
    {
        ++queen[0];
        for(i = 0;i<8; ++i)
        {
            if(queen[i]==8)            
            {   
 queen[i]=0;
               { ++queen[i+1];}
            }
        }
        flag =1;
		chongtu(queen);//摆放后调用位置冲突算法
    }
}
int main()
{
    int queen[9] = {0};
    set_queen(queen);
    return 0;
}
