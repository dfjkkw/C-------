//私有成员、公有成员和友元
#include<iostream>
#include<string>
using namespace std;
//建筑物
class Building {
private://私有
	string name;//名字
	float height;//高度
	float area;//占地面积
public://公有
	Building(string n, float h, float a) :name(n), height(h), area(a) {};
	string GetName() { return name; }
	float GetHeight() { return height; }
	float GetArea() { return area; }
	//friend关键字承认一个外部函数为友元，即允许他访问私有成员
	friend bool Correction(Building&, float, int);//这里的参数表只写类型就可以了
};
//修改Building数据的函数
bool Correction(Building& building, float difference, int type)//注意building类型的参数需要是一个引用，才能修改到他的值
{
	switch (type) {
	case 1:building.height += difference;return true;
	case 2:building.area += difference;return true;
	default:return false;
	}
}
int main(void)
{
	//若自己写了带参构造函数，则编译器不会再提供无参构造函数
	Building bd("水塔",20,8);
	cout << bd.GetName() << "的高度为" << bd.GetHeight() << "米,占地面积为" << bd.GetArea() <<"平方米" << endl;
	Correction(bd, -1, 2);//建立引用传入的函数即参数本身
	cout << bd.GetName() << "的高度为" << bd.GetHeight() << "米,占地面积为" << bd.GetArea() << "平方米" << endl;
	return 0;
}